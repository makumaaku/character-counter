---
description: 多言語対応ルール
globs: app/**/*.*, packages/**/*.*,src/**/*.*
---

# 多言語対応ルール

## 基本方針
- Next.jsのi18n機能を使用し、URLパスベースの言語切り替えを実装
- デフォルト言語は英語（en）
- 現在対応言語：英語（en）、日本語（ja）

## 実装ルール

### 1. 画面遷移時の注意事項
- すべてのページは`/[lang]/`配下に配置する
- 画面遷移時は必ず`/[lang]/`パスを含めること
- `next/link`を使用する場合は、以下のように言語パラメータを含める
```tsx
<Link href={`/${lang}/about`}>About</Link>
```

### 2. テキストの追加方法
- すべてのテキストは`locales/`ディレクトリ内の言語ファイルで管理
  - 英語：`locales/en.json`
  - 日本語：`locales/ja.json`
- 新規テキスト追加時は必ず両方の言語ファイルに追加すること
- キーは階層構造を持たせ、スコープを明確にする
```json
{
  "page": {
    "section": {
      "key": "value"
    }
  }
}
```
- テキストの参照は`translate`関数を使用
```tsx
translate(lang, 'page.section.key')
```

### 3. 新規言語追加時の手順
1. `src/lib/i18n/types.ts`の`Language`型に新しい言語を追加
```typescript
export type Language = 'en' | 'ja' | 'new_lang';
```
2. `locales/`に新しい言語ファイルを作成（例：`fr.json`）
3. `src/lib/i18n/server.ts`の`messages`オブジェクトに新しい言語を追加
4. すべての既存テキストを新しい言語に翻訳
5. 言語切り替えコンポーネントに新しい言語を追加

### 4. 注意事項
- 翻訳漏れを防ぐため、新規テキスト追加時は必ずすべての言語ファイルを更新
- 言語ファイルのキー構造は全言語で統一すること
- 動的なテキストを含む場合は、プレースホルダーを使用
```json
{
  "welcome": "Welcome, {name}!"
}
```
- SEO対策として、各ページのメタデータも多言語対応すること

### 5. 型安全性
- 翻訳キーの型安全性を確保するため、可能な限り定数として管理
- 新規キー追加時は、TypeScriptの型チェックを活用

### 6. パフォーマンス考慮事項
- 言語ファイルは必要な時のみ読み込む（動的インポート推奨）
- キャッシュ戦略を適切に設定
- 不要な再レンダリングを防ぐため、翻訳の使用は適切なスコープで行う
