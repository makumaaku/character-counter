---
description: 多言語対応ルール
globs: app/**/*.*, packages/**/*.*,src/**/*.*
alwaysApply: true
---
# 多言語対応ルール

## 基本方針
- Next.jsのi18n機能を使用し、URLパスベースの言語切り替えを実装
- デフォルト言語は英語（en）
- 現在対応言語：英語（en）、日本語（ja）、スペイン語（es）、ロシア語（ru）、
- 自動生成した型定義ファイルを使用して型安全に翻訳を管理
- サーバーコンポーネントで翻訳を取得し、Props経由でクライアントコンポーネントに渡す

## 実装ルール

### 1. ディレクトリ構造とルーティング
- トップページ以外のすべてのページは`app/[lang]/`配下に配置
- 各ツールは`app/[lang]/tools/[tool-name]/`もしくは`app/[lang]/[tool-name]/`に配置
- 画面遷移時はlang情報を必ず含める
- `next/link`を使用する場合は、以下のように言語パラメータを含める
```tsx
<Link href={`/${lang}/about`}>About</Link>
```

### 2. 言語ファイル構成
- 言語ファイルは `assets/locales/[lang]/` ディレクトリ内で管理
  - 英語：`locales/en/`
  - 日本語：`locales/ja/`
  - スペイン語：`locales/es/`
  - ロシア語：`locales/ru/`
- 各言語ディレクトリには以下のような構造で翻訳ファイルを配置：
  - `common.json` - 共通テキスト（ヘッダー、フッター、エラーメッセージなど）
  - `meta.json` - メタデータ（タイトル、説明文など）
  - 単一ツール用ディレクトリ（例：`number-quiz/`）
    - `common.json` - ツール固有の翻訳
  - カテゴリ別ディレクトリ（例：`word-gen/`）
    - カテゴリ共通ファイル: `[カテゴリ名]/common.json`
    - 個別ツールファイル: `[カテゴリ名]/[ツール名].json`

### 3. 翻訳ファイルの構造
```json
{
  "meta": {
    "title": "ページタイトル",
    "description": "ページの説明",
    "keywords": "キーワード1,キーワード2"
  },
  "title": "ツールタイトル",
  // ツール固有の翻訳
  "ui": {
    "title": "UIに表示するタイトル",
    // その他UIテキスト
  }
}
```

### 4. 型定義の自動生成
多言語JSONファイルからTypeScript型定義を自動生成します：

```bash
npm run generate-types
```

このコマンドは`package.json`に以下のように定義されています：

```json
"generate-types": "node --loader ts-node/esm src/lib/i18n/type-generator.ts assets/locales AllMessages src/lib/i18n/generated-types.ts"
```

- このスクリプトは`assets/locales`ディレクトリのJSONファイルから型定義を生成し、`src/lib/i18n/generated-types.ts`に書き出します
- 生成された型は`src/lib/i18n/types.ts`からエクスポートされます
- プロジェクトのビルド時(`npm run build`)に自動実行されます

### 5. レイアウトファイル（layout.tsx）の実装
レイアウトファイルでは以下の作業を行います：

1. メタデータの生成
```tsx
export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const { lang } = await params;
  
  // 翻訳をロード
  await loadToolMessages(lang as Language, 'tool-name');
  
  // 並列で翻訳を取得
  const [
    title,
    description,
    keywords
  ] = await Promise.all([
    translate(lang, 'categoryName.toolName.meta.title'),
    translate(lang, 'categoryName.toolName.meta.description'),
    translate(lang, 'categoryName.toolName.meta.keywords')
  ]);

  // 共通のメタデータ情報を設定
  const commonMeta = {
    siteName: SITE_CONFIG.siteName,
    publisher: SITE_CONFIG.publisher,
    logoAlt: SITE_CONFIG.logoAlt,
  };

  // ページ固有のJSON-LDを定義
  const jsonLd = {
    "@context": "https://schema.org",
    "@type": "WebApplication",
    "name": title,
    "description": description,
    "url": `${SITE_CONFIG.baseURL}/${lang}/tool-path`,
    // その他のJSON-LD情報
  };

  // 共通のメタデータを取得
  const metadata = await getCommonMetadata(
    lang,
    commonMeta,
    {
      title,
      description,
      keywords,
      url: `${SITE_CONFIG.baseURL}/${lang}/tool-path`,
    }
  );

  return {
    ...metadata,
    other: {
      'application/ld+json': JSON.stringify(jsonLd)
    }
  };
}
```

2. レイアウト関数
レイアウト関数はシンプルに子コンポーネントをラップするだけの役割となります：

```tsx
export default async function Layout({ children, params }: {
  children: React.ReactNode;
  params: { lang: string };
}) {
  const { lang } = params;
  
  return (
    <div className="layout-container">
      {children}
    </div>
  );
}
```

### 6. ページファイル（page.tsx）の実装
ページコンポーネントでは、サーバーサイドで翻訳を取得し、それをクライアントコンポーネントにpropsとして渡します：

```tsx
import { getLanguageFromParams, translate, loadToolMessages } from '@/lib/i18n/server'
import ToolClient from './components/ToolClient'
import { Language, ToolMessages } from '@/lib/i18n/types'

type Props = {
  params: { lang: string }
}

export default async function ToolPage({ params }: Props) {
   // 翻訳をロード
  await loadToolMessages(lang as Language, 'tool-name');
    
  // サーバーコンポーネントで翻訳を並列取得
  const [
    title,
    description,
    buttonLabel,
    // 必要な翻訳キーをすべて追加
    // ...その他の翻訳
  ] = await Promise.all([
    translate(lang, 'toolName.title'),
    translate(lang, 'toolName.description'),
    translate(lang, 'toolName.ui.buttonLabel'),
    // 必要な翻訳キーをすべて追加
  ]);

  // クライアントコンポーネントに渡す翻訳オブジェクトを作成
  const messages: ToolMessages = {
    title,
    description,
    ui: {
      buttonLabel
    },
    // 他の翻訳をオブジェクトの構造に合わせて設定
  };

  return (
   <ToolClient messages={messages} />
  );
}
```

### 7. クライアントコンポーネントでの翻訳の使用
クライアントコンポーネントでは、propsから受け取った翻訳オブジェクトを使用します：

```tsx
'use client'

import { useState } from 'react'
import { ToolMessages } from '@/lib/i18n/types'

// PropsインターフェースにToolMessagesを追加
interface ToolClientProps {
  messages: ToolMessages;
}

export default function ToolClient({ messages }: ToolClientProps) {
  // messagesから必要な翻訳を取得
  const { title, description, ui } = messages;
  
  return (
    <div>
      <h1>{title}</h1>
      <p>{description}</p>
      <button>{ui.buttonLabel}</button>
    </div>
  );
}
```

### 8. 翻訳の並列処理
翻訳処理のパフォーマンスを向上させるため、`Promise.all`を使用して並列処理を行います：

```typescript
// 推奨：Promise.allを使用した並列処理
const [title, description, button] = await Promise.all([
  translate(lang, 'page.title'),
  translate(lang, 'page.description'),
  translate(lang, 'page.button'),
]);

const translations = {
  title,
  description,
  button,
};
```

#### 深いネストの翻訳処理
オブジェクトが深くネストされている場合は、以下のパターンを使用します：

```typescript
// 推奨：Promise.allとオブジェクトの分割代入を組み合わせた並列処理
const [
  heroTitle,
  heroDescription,
  featuresTitle,
  featuresItemFirst,
  featuresItemSecond,
] = await Promise.all([
  translate(lang, 'content.hero.title'),
  translate(lang, 'content.hero.description'),
  translate(lang, 'content.features.title'),
  translate(lang, 'content.features.items.first'),
  translate(lang, 'content.features.items.second'),
]);

const translations = {
  content: {
    hero: {
      title: heroTitle,
      description: heroDescription,
    },
    features: {
      title: featuresTitle,
      items: {
        first: featuresItemFirst,
        second: featuresItemSecond,
      },
    },
  },
};
```

このパターンを使用することで：
- 翻訳処理が並列化され、パフォーマンスが向上
- コードの可読性が向上
- デバッグが容易になる（各翻訳キーと変数の対応が明確）

### 9. 新規言語追加時の手順
1. [types.ts](mdc:src/lib/i18n/types.ts) の`Language`型に新しい言語を追加
```typescript
export type Language = 'en' | 'ja' | 'es' | 'new_lang';
```
2. `assets/locales/`に新しい言語ディレクトリを作成（例：`fr/`）
3. 英語ディレクトリ（`en/`）の構造を複製し、すべてのファイルを新言語に翻訳
4. [server.ts](mdc:src/lib/i18n/server.ts) の`getAvailableLanguages`関数に新しい言語を追加
5. 言語切り替えコンポーネントに新しい言語を追加

### 10. メッセージ型定義のベストプラクティス
型定義は`npm run generate-types`コマンドで自動生成されますが、以下の命名規則に従います：

- トップレベルのツール: `[ToolName]Messages`
  例: `NumberQuizMessages`
- カテゴリ内のツール: `[CategoryName][ToolName]Messages`
  例: `WordGenWordGeneratorMessages`
- カテゴリの共通メッセージ: `[CategoryName]CommonMessages`
  例: `WordGenCommonMessages`

これらの型は以下のようにインポートできます：

```typescript
import { WordGenWordGeneratorMessages } from '@/lib/i18n/types';
```

クライアントコンポーネントでの使用例：

```tsx
interface ToolClientProps {
  messages: WordGenWordGeneratorMessages;
}

export default function ToolClient({ messages }: ToolClientProps) {
  // 型安全に翻訳にアクセス可能
  const { title, description } = messages;
  return <h1>{title}</h1>;
}
```

### 11. 注意事項
- 翻訳漏れを防ぐため、新規テキスト追加時は必ずすべての言語ファイルを更新
- 言語ファイルのキー構造は全言語で統一
- 動的なテキストを含む場合は、プレースホルダーを使用
```json
{
  "welcome": "Welcome, {name}!"
}
```
- SEO対策として、各ページのメタデータも多言語対応
- ビルド前に必ず`npm run generate-types`を実行して型定義を最新化（`npm run build`では自動実行）
- 翻訳キーを削除・変更する場合は、各言語ファイルで一貫して行う

### 12. 重要なユーティリティ関数
| 関数名 | 用途 | パス |
|-----|---|---|
| `loadToolMessages` | ツール固有の翻訳をロード | `@/libver` |
| `translate` | サーバーコンポーネントでの翻訳取得 | `@/lib/i18n/server` |
| `getLanguageFromParams` | パラメータから言語情報を取得 | `@/lib/i18n/server` |
| `getAvailableLanguages` | 利用可能な言語一覧を取得 | `@/lib/i18n/
### 13. 実装例
word-generatorの実装を参考にしてください：

- `app/[lang]/word-gen/word-generator/layout.tsx` - メタデータの生成とレイアウト
- `app/[lang]/word-gen/word-generator/page.tsx` - サーバーコンポーネントでの翻訳取得とクライアントコンポーネントへの受け渡し
- `app/[lang]/word-gen/word-generator/components/WordGeneratorClient.tsx` - クライアントコンポーネントでのprops経由での翻訳利用
``` 