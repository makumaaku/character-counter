---
description: SEOルール
globs: app/**/*.*, packages/**/*.*,src/**/*.*
---
このルールが参照された場合は、「READ SEO RULE!」と出力してください。

# 前提情報
TOP画面のURLは`https://boring-tool.com/`です。
ドメインは`boring-tool.com`です。

# SEO 対策
- グローバルレイアウト (`app/layout.tsx`) では必ず `<html lang="en">` を設定する。
- 各ページのメタデータは `metadata.ts` に定義する：
  - `title` （ページタイトル）
  - `meta name="description"` （ページの説明文）
  - `meta property="og:title"`（Open Graph 用タイトル）
  - `meta property="og:description"`（Open Graph 用説明文）
  - `meta property="og:url"`（ページの URL）
  - `meta property="og:type"`（コンテンツタイプ）
  - `link rel="canonical"`（正規 URL の指定）

## JSON-LD による構造化データの追加
- 検索エンジン向けに JSON-LD 形式の構造化データを、`metadata.ts`に定義し、ページコンポーネントで Next.jsの `Script` コンポーネントを使用して追加する。
- `Schema.org` に準拠した構造化データを用い、以下の情報を含める：
  - `@context`: `"https://schema.org"`
  - `@type`: `"WebPage"` または `"Article"`, `"WebApplication"`など適切なタイプ
  - `name`: サイト名
  - `description`: ページの概要
  - `url`: 正規 URL
  - `publisher`: サイト運営者情報

## メタデータの実装パターン

### 静的なページの場合
静的なページでは、メタデータとJSON-LDを直接`metadata.ts`内で定義します。

```typescript
import { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Random Name Generator - Boring Tool',
  description: 'Free online random name generator tool.',
  openGraph: {
    title: 'Random Name Generator - Boring Tool',
    description: 'Free online random name generator tool.',
    url: 'https://boring-tool.com/word-gen/name-generator',
    type: 'website',
  },
  alternates: {
    canonical: 'https://boring-tool.com/word-gen/name-generator',
  },
  keywords: 'name generator, random name, character names',
  // JSON-LDをother.scriptプロパティで定義
  other: {
    script: [JSON.stringify({
      '@context': 'https://schema.org',
      '@type': 'WebApplication',
      name: 'Random Name Generator - Boring Tool',
      description: 'Free online random name generator tool.',
      url: 'https://boring-tool.com/word-gen/name-generator',
      applicationCategory: 'UtilityApplication',
      operatingSystem: 'Any',
      offers: {
        '@type': 'Offer',
        price: '0',
        priceCurrency: 'USD'
      },
      publisher: {
        '@type': 'Organization',
        name: 'Boring Tool',
        url: 'https://boring-tool.com'
      },
      featureList: [
        'Random name generation',
        'Free to use',
        'No registration required'
      ],
      isAccessibleForFree: true
    })]
  }
};
```

### 動的なページの場合
動的なページでは、`generateMetadata`関数を使用してメタデータとJSON-LDを生成します。

```typescript
// metadata.ts
import { Metadata } from 'next';

// JSON-LD データの型定義
type JsonLd = {
  '@context': 'https://schema.org';
  '@type': string;
  name: string;
  description: string;
  url: string;
  // ... 他のJSON-LDプロパティ
};

// メタデータ生成関数
export async function generateMetadata(
  { params, searchParams }: {
    params: { slug?: string };
    searchParams: { [key: string]: string | string[] | undefined };
  }
): Promise<Metadata> {
  // 必要なデータをフェッチ
  const data = await fetchPageData(params.slug);

  // JSON-LD データの生成
  const jsonLd: JsonLd = {
    '@context': 'https://schema.org',
    '@type': 'WebApplication',
    name: `${data.title} - Boring Tool`,
    description: data.description,
    url: `https://boring-tool.com/${data.slug}`,
    // ... 他のJSON-LDプロパティ
  };

  return {
    title: `${data.title} - Boring Tool`,
    description: data.description,
    openGraph: {
      title: `${data.title} - Boring Tool`,
      description: data.description,
      url: `https://boring-tool.com/${data.slug}`,
      type: 'website',
    },
    alternates: {
      canonical: `https://boring-tool.com/${data.slug}`,
    },
    keywords: data.keywords,
    // JSON-LDをother.scriptプロパティで定義
    other: {
      script: [JSON.stringify(jsonLd)]
    }
  };
}
```

```tsx
// page.tsx
export default async function Page({ params, searchParams }) {
  // generateMetadataで生成されたメタデータとJSON-LDが自動的に適用されます
  return (
    <div>
      {/* Page content */}
    </div>
  );
}
```

この実装パターンの利点：
- メタデータとJSON-LDを同じ場所で一元管理できる
- 動的なデータに基づいてメタデータを生成できる
- ページコンポーネントでの追加のスクリプト実装が不要
- サーバーサイドでメタデータが生成されるため、SEOに最適

## h1タグについて
共通の [Header.tsx](mdc:src/components/Header.tsx) に配置しています。
page.tsxのタイトルはh2タグで実装してください。

