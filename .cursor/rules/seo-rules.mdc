---
description: SEOルール
globs: app/**/*.*, packages/**/*.*,src/**/*.*
alwaysApply: false
---
このルールが参照された場合は、「READ SEO RULE!」と出力してください。

# 前提
また、共通のメタデータ設定は [metadata.ts](mdc:src/lib/metadata.ts) の`getCommonMetadata`関数から取得します：
```typescript
export const getCommonMetadata = async (lang: string, commonMeta: {
  siteName: string;
  publisher: string;
  logoAlt: string;
}, pageMeta: {
  title: string;
  description: string;
  keywords: string;
  url: string;
}): Promise<Metadata> => {
  return {
   // 省略...
    }
  };
```

この関数は以下の共通設定を提供します：
- metadataBase（サイトのベースURL）
- OpenGraph設定（タイトル、説明、画像など）
- 代替言語設定（canonical URL、言語切り替えなど）
- アイコン設定（favicon、アプリアイコンなど）

# SEO 対策
- グローバルレイアウト (`app/layout.tsx`) では必ず `<html lang={lang}` を設定する。
- 各ページのメタデータは `layout.tsx` に定義する：
  - `title` （ページタイトル）
  - `meta name="description"` （ページの説明文）
  - `meta property="og:title"`（Open Graph 用タイトル）
  - `meta property="og:description"`（Open Graph 用説明文）
  - `meta property="og:url"`（ページの URL）
  - `meta property="og:type"`（コンテンツタイプ）
  - `link rel="canonical"`（正規 URL の指定）

## 多言語対応のメタデータ実装
多言語対応のメタデータは、以下のルールに従って実装します：

### ツール専用のjsonファイルのロード
```typescript
await loadToolMessages(lang as Language, 'tool-name');
```


### 言語別URLの設定
- canonical URLは現在の言語バージョンのURLを指定
- alternatesで他の言語バージョンのURLを指定
- `x-default`は必ずデフォルト言語（英語）のURLを指定する
```typescript
alternates: {
  canonical: `${SITE_CONFIG.baseURL}/${lang}`,
  languages: {
    'en': `${SITE_CONFIG.baseURL}/en`,
    'ja': `${SITE_CONFIG.baseURL}/ja`,
    'es': `${SITE_CONFIG.baseURL}/es`,
    'ru': `${SITE_CONFIG.baseURL}/ru`,
    'zh': `${SITE_CONFIG.baseURL}/zh`,
    'x-default': `${SITE_CONFIG.baseURL}/en`  // デフォルト言語（英語）のURLを指定
  },
}
```


### JSON-LDの多言語対応
- 検索エンジン向けに JSON-LD 形式の構造化データを、`layout.tsx`に定義し、ページコンポーネントで Next.jsの `Script` コンポーネントを使用して追加する。
- `Schema.org` に準拠した構造化データを用い、以下の情報を含める：
  - `@context`: `"https://schema.org"`
  - `@type`: `"WebPage"` または `"Article"`, `"WebApplication"`など適切なタイプ
  - `name`: サイト名（SITE_CONFIG.siteNameから取得）
  - `description`: ページの概要
  - `url`: 正規 URL（SITE_CONFIG.baseURLから生成）
  - `publisher`: サイト運営者情報（SITE_CONFIG.publisherから取得）

**例**
```typescript
const jsonLd = {
    "@context": "https://schema.org",
    "@type": "WebApplication",
    "name": title,
    "description": description,
    "url": `${SITE_CONFIG.baseURL}/${lang}/tool-name`,
    "applicationCategory": "WebApplication",
    "operatingSystem": "Any",
    "publisher": {
      "@type": "Organization",
      "name": commonMeta.siteName,
      "logo": {
        "@type": "ImageObject",
        "url": `${SITE_CONFIG.baseURL}${SITE_CONFIG.logo.url}`,
        "width": SITE_CONFIG.logo.width,
        "height": SITE_CONFIG.logo.height
      }
    }
  };
```

## メタデータの実装パターン

### 静的なページの場合
- 静的なページでは、メタデータとJSON-LDを直接`layout.tsx`内で定義します。
- `translate`関数のkeyには`toolName.meta.title`などキャメルケースを.で区切ってください。
- `translate`関数はPromise.allを使って、並列で翻訳を取得してください。
以下は例なので、各画面の文脈によって内容は変更してください。

**例**
number-quizの場合
```typescript
import { SITE_CONFIG } from '@/constants/constants';
import { translate } from '@/lib/i18n/server';
import { getCommonMetadata } from '@/lib/metadata';
import { Metadata } from 'next';

type Props = {
  children: React.ReactNode;
  params: Promise<{ lang: string }>;
}

export async function generateMetadata(
  { params }: Props
): Promise<Metadata> {
  const { lang } = await params;
  
  // number-quiz用の翻訳をロード
  await loadToolMessages(lang as Language, 'number-quiz');
  
  // 並列で翻訳を取得
  const [
    title,
    description,
    keywords
  ] = await Promise.all([
    translate(lang, 'numberQuiz.meta.title'),
    translate(lang, 'numberQuiz.meta.description'),
    translate(lang, 'numberQuiz.meta.keywords')
  ]);

  // 共通のメタデータ情報を設定
  const commonMeta = {
    siteName: SITE_CONFIG.siteName,
    publisher: SITE_CONFIG.publisher,
    logoAlt: SITE_CONFIG.logoAlt,
  };

  // ページ固有のJSON-LDを定義
  const jsonLd = {
    "@context": "https://schema.org",
    "@type": "WebApplication",
    "name": title,
    "description": description,
    "url": `${SITE_CONFIG.baseURL}/${lang}/number-quiz`,
    "applicationCategory": "GameApplication",
    "operatingSystem": "Any",
    "publisher": {
      "@type": "Organization",
      "name": commonMeta.siteName,
      "logo": {
        "@type": "ImageObject",
        "url": `${SITE_CONFIG.baseURL}${SITE_CONFIG.logo.url}`,
        "width": SITE_CONFIG.logo.width,
        "height": SITE_CONFIG.logo.height
      }
    }
  };

  // 共通のメタデータを取得
  const metadata = await getCommonMetadata(
    lang,
    commonMeta,
    {
      title,
      description,
      keywords,
      url: `${SITE_CONFIG.baseURL}/${lang}/number-quiz`,
    }
  );

  return {
    ...metadata,
    other: {
      'application/ld+json': JSON.stringify(jsonLd)
    }
  };
}
```

### 動的なページの場合
動的なページでは、`generateMetadata`関数を使用してメタデータとJSON-LDを生成します。基本的な実装パターンは静的ページと同じですが、動的なデータを含める必要がある場合は、そのデータを取得してから`getCommonMetadata`を呼び出します。

```typescript
export async function generateMetadata(
  { params, searchParams }: {
    params: { slug?: string; lang: string };
    searchParams: { [key: string]: string | string[] | undefined };
  }
): Promise<Metadata> {
  const data = await fetchPageData(params.slug);
  const lang = params.lang;
  const t = (key: string) => translate(lang, key);

  const commonMeta = {
    siteName: SITE_CONFIG.siteName,
    publisher: SITE_CONFIG.publisher,
    logoAlt: SITE_CONFIG.logoAlt,
  };

  // 動的なデータを含むJSON-LDを生成
  const jsonLd = {
    "@context": "https://schema.org",
    "@type": "WebApplication",
    "name": `${data.title} - ${commonMeta.siteName}`,
    "description": data.description,
    "url": `${SITE_CONFIG.baseURL}/${lang}/${data.slug}`,
    "publisher": {
      "@type": "Organization",
      "name": commonMeta.siteName,
      "logo": {
        "@type": "ImageObject",
        "url": `${SITE_CONFIG.baseURL}${SITE_CONFIG.logo.url}`,
        "width": SITE_CONFIG.logo.width,
        "height": SITE_CONFIG.logo.height
      }
    }
  };

  // 共通のメタデータを取得
  const metadata = await getCommonMetadata(
    lang,
    commonMeta,
    {
      title: `${data.title} - ${commonMeta.siteName}`,
      description: data.description,
      keywords: data.keywords,
      url: `${SITE_CONFIG.baseURL}/${lang}/${data.slug}`,
    }
  );

  return {
    ...metadata,
    other: {
      'application/ld+json': JSON.stringify(jsonLd)
    }
  };
}
```

## h1タグについて
h1タグは、ページの主要な見出しを示すために使用されます。必ず1画面に1つ用意してください。
