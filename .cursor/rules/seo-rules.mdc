---
description: SEOルール
globs: app/**/*.*, packages/**/*.*,src/**/*.*
---
このルールが参照された場合は、「READ SEO RULE!」と出力してください。

# 前提情報
サイトの設定は`src/constants/constants.ts`の`SITE_CONFIG`から取得します：
```typescript
export const SITE_CONFIG = {
  baseURL: 'https://boring-tool.com',
  siteName: 'common.meta.siteName', // i18nキー
  publisher: 'common.meta.publisher', // i18nキー
  logo: {
    url: '/images/logo.png',
    width: 192,
    height: 192,
    alt: 'common.meta.logoAlt' // i18nキー
  },
  icons: {
    favicon: '/favicon.ico',
    icon192: '/icon-192x192.png',
    icon512: '/icon-512x512.png',
    appleIcon: '/apple-touch-icon.png'
  }
};
```

また、共通のメタデータ設定は`src/lib/metadata.ts`の`getCommonMetadata`関数から取得します：
```typescript
export const getCommonMetadata = (
  lang: string,
  commonMeta: {
    siteName: string;
    publisher: string;
    logoAlt: string;
  },
  pageMeta: {
    title: string;
    description: string;
    keywords: string;
    url: string;
  }
): Metadata
```

この関数は以下の共通設定を提供します：
- metadataBase（サイトのベースURL）
- OpenGraph設定（タイトル、説明、画像など）
- 代替言語設定（canonical URL、言語切り替えなど）
- アイコン設定（favicon、アプリアイコンなど）

# SEO 対策
- グローバルレイアウト (`app/layout.tsx`) では必ず `<html lang={lang}` を設定する。
- 各ページのメタデータは `metadata.ts` に定義する：
  - `title` （ページタイトル）
  - `meta name="description"` （ページの説明文）
  - `meta property="og:title"`（Open Graph 用タイトル）
  - `meta property="og:description"`（Open Graph 用説明文）
  - `meta property="og:url"`（ページの URL）
  - `meta property="og:type"`（コンテンツタイプ）
  - `link rel="canonical"`（正規 URL の指定）

## 多言語対応のメタデータ実装
多言語対応のメタデータは、以下のルールに従って実装します：

### 1. メタデータの構造
- 各ページのメタデータは、画面ごとに `[page].meta` の形式で管理
- 共通のメタデータは `common.meta` で管理
```json
{
  "common": {
    "meta": {
      "siteName": "サイト名",
      "publisher": "発行者",
      "logoAlt": "ロゴの代替テキスト"
    }
  },
  "home": {
    "meta": {
      "title": "ページタイトル",
      "description": "ページの説明",
      "keywords": "キーワード"
    }
  }
}
```

### 2. generateMetadata関数の実装
```typescript
import { SITE_CONFIG } from '@/constants/constants';

export async function generateMetadata(
  props: Props,
  page: string = 'home'
): Promise<Metadata> {
  const params = await props.params;
  const lang = params.lang;
  const t = (key: string) => translate(lang, key);

  // 共通のメタデータを取得
  const commonMeta = {
    siteName: t(SITE_CONFIG.siteName),
    publisher: t(SITE_CONFIG.publisher),
    logoAlt: t(SITE_CONFIG.logo.alt),
  };

  // ページ固有のメタデータを取得
  const title = t(`${page}.meta.title`);
  const description = t(`${page}.meta.description`);
  const keywords = t(`${page}.meta.keywords`);

  return {
    metadataBase: new URL(SITE_CONFIG.baseURL),
    title,
    description,
    icons: SITE_CONFIG.icons,
    // ... 他のメタデータ
  };
}
```

### 3. 言語別URLの設定
- canonical URLは現在の言語バージョンのURLを指定
- alternatesで他の言語バージョンのURLを指定
- `x-default`は必ずデフォルト言語（英語）のURLを指定する
```typescript
alternates: {
  canonical: `${SITE_CONFIG.baseURL}/${lang}`,
  languages: {
    'en': `${SITE_CONFIG.baseURL}/en`,
    'ja': `${SITE_CONFIG.baseURL}/ja`,
    'x-default': `${SITE_CONFIG.baseURL}/en`  // デフォルト言語（英語）のURLを指定
  },
}
```

### 4. OpenGraphの言語設定
- `locale`に現在の言語を設定
- `alternateLocale`に他の言語を設定
```typescript
openGraph: {
  locale: lang,
  alternateLocale: [lang === 'en' ? 'ja' : 'en'],
  images: [{
    url: SITE_CONFIG.logo.url,
    width: SITE_CONFIG.logo.width,
    height: SITE_CONFIG.logo.height,
    alt: t(SITE_CONFIG.logo.alt)
  }]
}
```

### 5. JSON-LDの多言語対応
- JSON-LDの`name`、`description`などのテキストも多言語対応
- URLも言語に応じて適切に設定
```typescript
const getJsonLd = (lang: string, page: string) => ({
  name: t(`${page}.meta.title`),
  description: t(`${page}.meta.description`),
  url: `${SITE_CONFIG.baseURL}/${lang}`,
  publisher: {
    '@type': 'Organization',
    name: t(SITE_CONFIG.siteName),
    logo: {
      '@type': 'ImageObject',
      url: `${SITE_CONFIG.baseURL}${SITE_CONFIG.logo.url}`,
      width: SITE_CONFIG.logo.width,
      height: SITE_CONFIG.logo.height
    }
  }
});
```

## JSON-LD による構造化データの追加
- 検索エンジン向けに JSON-LD 形式の構造化データを、`metadata.ts`に定義し、ページコンポーネントで Next.jsの `Script` コンポーネントを使用して追加する。
- `Schema.org` に準拠した構造化データを用い、以下の情報を含める：
  - `@context`: `"https://schema.org"`
  - `@type`: `"WebPage"` または `"Article"`, `"WebApplication"`など適切なタイプ
  - `name`: サイト名（SITE_CONFIG.siteNameから取得）
  - `description`: ページの概要
  - `url`: 正規 URL（SITE_CONFIG.baseURLから生成）
  - `publisher`: サイト運営者情報（SITE_CONFIG.publisherから取得）

## メタデータの実装パターン

### 静的なページの場合
静的なページでは、メタデータとJSON-LDを直接`metadata.ts`内で定義します。
以下は例なので、各画面の文脈によって内容は変更してください。

```typescript
import { SITE_CONFIG } from '@/constants/constants';
import { translate } from '@/lib/i18n/server';
import { getCommonMetadata } from '@/lib/metadata';
import { Metadata } from 'next';

type Props = {
  params: Promise<{ lang: string }>
}

export async function generateMetadata(
  { params }: Props
): Promise<Metadata> {
  const { lang } = await params;
  const t = (key: string) => translate(lang, key);

  // 共通のメタデータ情報を設定
  const commonMeta = {
    siteName: t(SITE_CONFIG.siteName),
    publisher: t(SITE_CONFIG.publisher),
    logoAlt: t('common.meta.logoAlt'),
  };

  // ページ固有のJSON-LDを定義
  const jsonLd = {
    "@context": "https://schema.org",
    "@type": "WebApplication",
    "name": t('page.meta.title'),
    "description": t('page.meta.description'),
    "url": `${SITE_CONFIG.baseURL}/${lang}/path-to-page`,
    "publisher": {
      "@type": "Organization",
      "name": commonMeta.siteName,
      "logo": {
        "@type": "ImageObject",
        "url": `${SITE_CONFIG.baseURL}${SITE_CONFIG.logo.url}`,
        "width": SITE_CONFIG.logo.width,
        "height": SITE_CONFIG.logo.height
      }
    }
  };

  // 共通のメタデータを取得
  const metadata = getCommonMetadata(
    lang,
    commonMeta,
    {
      title: t('page.meta.title'),
      description: t('page.meta.description'),
      keywords: t('page.meta.keywords'),
      url: `${SITE_CONFIG.baseURL}/${lang}/path-to-page`,
    }
  );

  return {
    ...metadata,
    other: {
      'application/ld+json': JSON.stringify(jsonLd)
    }
  };
}
```

### 動的なページの場合
動的なページでは、`generateMetadata`関数を使用してメタデータとJSON-LDを生成します。基本的な実装パターンは静的ページと同じですが、動的なデータを含める必要がある場合は、そのデータを取得してから`getCommonMetadata`を呼び出します。

```typescript
export async function generateMetadata(
  { params, searchParams }: {
    params: { slug?: string; lang: string };
    searchParams: { [key: string]: string | string[] | undefined };
  }
): Promise<Metadata> {
  const data = await fetchPageData(params.slug);
  const lang = params.lang;
  const t = (key: string) => translate(lang, key);

  const commonMeta = {
    siteName: t(SITE_CONFIG.siteName),
    publisher: t(SITE_CONFIG.publisher),
    logoAlt: t('common.meta.logoAlt'),
  };

  // 動的なデータを含むJSON-LDを生成
  const jsonLd = {
    "@context": "https://schema.org",
    "@type": "WebApplication",
    "name": `${data.title} - ${commonMeta.siteName}`,
    "description": data.description,
    "url": `${SITE_CONFIG.baseURL}/${lang}/${data.slug}`,
    "publisher": {
      "@type": "Organization",
      "name": commonMeta.siteName,
      "logo": {
        "@type": "ImageObject",
        "url": `${SITE_CONFIG.baseURL}${SITE_CONFIG.logo.url}`,
        "width": SITE_CONFIG.logo.width,
        "height": SITE_CONFIG.logo.height
      }
    }
  };

  // 共通のメタデータを取得
  const metadata = await getCommonMetadata(
    lang,
    commonMeta,
    {
      title: `${data.title} - ${commonMeta.siteName}`,
      description: data.description,
      keywords: data.keywords,
      url: `${SITE_CONFIG.baseURL}/${lang}/${data.slug}`,
    }
  );

  return {
    ...metadata,
    other: {
      'application/ld+json': JSON.stringify(jsonLd)
    }
  };
}
```

## h1タグについて
h1タグは、ページの主要な見出しを示すために使用されます。SEOには直接関係しませんが、ユーザーエクスペリエンスに影響を与える重要な要素です。