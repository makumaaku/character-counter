---
description: SEOルール
globs: app/**/*.*, packages/**/*.*,src/**/*.*
---
このルールが参照された場合は、「READ SEO RULE!」と出力してください。

# 前提情報
TOP画面のURLは`https://boring-tool.com/`です。
ドメインは`boring-tool.com`です。

# SEO 対策
- グローバルレイアウト (`app/layout.tsx`) では必ず `<html lang={lang}` を設定する。
- 各ページのメタデータは `metadata.ts` に定義する：
  - `title` （ページタイトル）
  - `meta name="description"` （ページの説明文）
  - `meta property="og:title"`（Open Graph 用タイトル）
  - `meta property="og:description"`（Open Graph 用説明文）
  - `meta property="og:url"`（ページの URL）
  - `meta property="og:type"`（コンテンツタイプ）
  - `link rel="canonical"`（正規 URL の指定）

## 多言語対応のメタデータ実装
多言語対応のメタデータは、以下のルールに従って実装します：

### 1. メタデータの構造
- 各ページのメタデータは、画面ごとに `[page].meta` の形式で管理
- 共通のメタデータは `common.meta` で管理
```json
{
  "common": {
    "meta": {
      "siteName": "サイト名",
      "publisher": "発行者",
      "logoAlt": "ロゴの代替テキスト"
    }
  },
  "home": {
    "meta": {
      "title": "ページタイトル",
      "description": "ページの説明",
      "keywords": "キーワード"
    }
  }
}
```

### 2. generateMetadata関数の実装
```typescript
export async function generateMetadata(
  props: Props,
  page: string = 'home'
): Promise<Metadata> {
  const params = await props.params;
  const lang = params.lang;
  const t = (key: string) => translate(lang, key);

  // 共通のメタデータを取得
  const commonMeta = {
    siteName: t('common.meta.siteName'),
    publisher: t('common.meta.publisher'),
    logoAlt: t('common.meta.logoAlt'),
  };

  // ページ固有のメタデータを取得
  const title = t(`${page}.meta.title`);
  const description = t(`${page}.meta.description`);
  const keywords = t(`${page}.meta.keywords`);

  return {
    title,
    description,
    // ... 他のメタデータ
  };
}
```

### 3. 言語別URLの設定
- canonical URLは現在の言語バージョンのURLを指定
- alternatesで他の言語バージョンのURLを指定
- `x-default`は必ずデフォルト言語（英語）のURLを指定する
```typescript
alternates: {
  canonical: `https://boring-tool.com/${lang}`,
  languages: {
    'en': 'https://boring-tool.com/en',
    'ja': 'https://boring-tool.com/ja',
    'x-default': 'https://boring-tool.com/en'  // デフォルト言語（英語）のURLを指定
  },
}
```

### 4. OpenGraphの言語設定
- `locale`に現在の言語を設定
- `alternateLocale`に他の言語を設定
```typescript
openGraph: {
  locale: lang,
  alternateLocale: [lang === 'en' ? 'ja' : 'en'],
}
```

### 5. JSON-LDの多言語対応
- JSON-LDの`name`、`description`などのテキストも多言語対応
- URLも言語に応じて適切に設定
```typescript
const getJsonLd = (lang: string, page: string) => ({
  name: t(`${page}.meta.title`),
  description: t(`${page}.meta.description`),
  url: `https://boring-tool.com/${lang}`,
});
```

## JSON-LD による構造化データの追加
- 検索エンジン向けに JSON-LD 形式の構造化データを、`metadata.ts`に定義し、ページコンポーネントで Next.jsの `Script` コンポーネントを使用して追加する。
- `Schema.org` に準拠した構造化データを用い、以下の情報を含める：
  - `@context`: `"https://schema.org"`
  - `@type`: `"WebPage"` または `"Article"`, `"WebApplication"`など適切なタイプ
  - `name`: サイト名
  - `description`: ページの概要
  - `url`: 正規 URL
  - `publisher`: サイト運営者情報

## メタデータの実装パターン

### グローバル定数の利用
サイト全体で共通して使用するメタデータは、`src/constants/constants.ts`から取得します。
以下の情報は`SITE_CONFIG`から取得してください：
- `baseURL`: サイトのベースURL
- `siteName`: サイト名（i18nキー）
- `publisher`: 発行者名（i18nキー）
- `logo`: ロゴ画像の情報
  - `url`: ロゴ画像のパス
  - `width`: 画像の幅
  - `height`: 画像の高さ
- `icons`: 各種アイコンのパス
  - `favicon`: ファビコン
  - `icon192`: PWA用192x192アイコン
  - `icon512`: PWA用512x512アイコン
  - `appleIcon`: Apple用アイコン

```typescript
import { SITE_CONFIG } from '@/constants/constants';

export const metadata: Metadata = {
  metadataBase: new URL(SITE_CONFIG.baseURL),
  title: t(SITE_CONFIG.siteName),
  publisher: t(SITE_CONFIG.publisher),
  icons: SITE_CONFIG.icons,
  // ... 他のメタデータ
};
```

### 静的なページの場合
静的なページでは、メタデータとJSON-LDを直接`metadata.ts`内で定義します。
以下は例なので、各画面の文脈によって内容は変更してください。

```typescript
import { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Random Name Generator - Boring Tool',
  description: 'Free online random name generator tool.',
  openGraph: {
    title: 'Random Name Generator - Boring Tool',
    description: 'Free online random name generator tool.',
    url: 'https://boring-tool.com/word-gen/name-generator',
    type: 'website',
  },
  alternates: {
    canonical: 'https://boring-tool.com/word-gen/name-generator',
  },
  keywords: 'name generator, random name, character names',
  // JSON-LDをother.scriptプロパティで定義
  other: {
    script: [JSON.stringify({
      '@context': 'https://schema.org',
      '@type': 'WebApplication',
      name: 'Random Name Generator - Boring Tool',
      description: 'Free online random name generator tool.',
      url: 'https://boring-tool.com/word-gen/name-generator',
      applicationCategory: 'UtilityApplication',
      operatingSystem: 'Any',
      offers: {
        '@type': 'Offer',
        price: '0',
        priceCurrency: 'USD'
      },
      publisher: {
        '@type': 'Organization',
        name: 'Boring Tool',
        url: 'https://boring-tool.com'
      },
      featureList: [
        'Random name generation',
        'Free to use',
        'No registration required'
      ],
      isAccessibleForFree: true
    })]
  }
};
```

### 動的なページの場合
動的なページでは、`generateMetadata`関数を使用してメタデータとJSON-LDを生成します。

```typescript
// metadata.ts
import { Metadata } from 'next';

// JSON-LD データの型定義
type JsonLd = {
  '@context': 'https://schema.org';
  '@type': string;
  name: string;
  description: string;
  url: string;
  // ... 他のJSON-LDプロパティ
};

// メタデータ生成関数
export async function generateMetadata(
  { params, searchParams }: {
    params: { slug?: string };
    searchParams: { [key: string]: string | string[] | undefined };
  }
): Promise<Metadata> {
  // 必要なデータをフェッチ
  const data = await fetchPageData(params.slug);

  // JSON-LD データの生成
  const jsonLd: JsonLd = {
    '@context': 'https://schema.org',
    '@type': 'WebApplication',
    name: `${data.title} - Boring Tool`,
    description: data.description,
    url: `https://boring-tool.com/${data.slug}`,
    // ... 他のJSON-LDプロパティ
  };

  return {
    title: `${data.title} - Boring Tool`,
    description: data.description,
    openGraph: {
      title: `${data.title} - Boring Tool`,
      description: data.description,
      url: `https://boring-tool.com/${data.slug}`,
      type: 'website',
    },
    alternates: {
      canonical: `https://boring-tool.com/${data.slug}`,
    },
    keywords: data.keywords,
    // JSON-LDをother.scriptプロパティで定義
    other: {
      script: [JSON.stringify(jsonLd)]
    }
  };
}
```

## h1タグについて
h1タグは、ページの主要な見出しを示すために使用されます。SEOには直接関係しませんが、ユーザーエクスペリエンスに影響を与える重要な要素です。