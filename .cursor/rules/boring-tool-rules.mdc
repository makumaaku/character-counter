---
description: フロントエンドにおけるベストプラクティス
globs: app/**/*.*, src/**/*.*
alwaysApply: false
---
# フロントエンドUI実装ルール

## 基本方針
- 新しいUIコンポーネントを実装する際は、既存の共通コンポーネントを最大限活用する
- 共通コンポーネントの存在する機能と類似した機能を重複実装しない
- プロジェクト全体で一貫したUIとUXを維持する

## 共通コンポーネント一覧

### 基本UI要素 (`src/components/ui/`)
以下のコンポーネントは基本的なUI要素を提供します：

| コンポーネント | 用途 | インポート方法 |
|-------------|------|--------------|
| `Button` | 各種ボタン | `import { Button } from '@/components/ui/button';` |
| `Input` | 入力フィールド | `import { Input } from '@/components/ui/input';` |
| `Card` | 情報カード | `import { Card, CardContent } from '@/components/ui/card';` |
| `Alert` | 通知・警告表示 | `import { Alert, AlertDescription } from '@/components/ui/alert';` |

### 高度なコンポーネント (`src/components/`)
以下のコンポーネントはより特化した機能を提供します：

| コンポーネント | 用途 | インポート方法 |
|-------------|------|--------------|
| `FileUploadArea` | ファイルアップロード領域 | `import FileUploadArea from '@/components/FileUploadArea';` |
| `CopyButton` | テキストコピー機能付きボタン | `import CopyButton from '@/components/CopyButton';` |
| `ToolCard` | ツール表示用カード | `import ToolCard from '@/components/ToolCard';` |
| `LanguageSwitcher` | 言語切替UI | `import LanguageSwitcher from '@/components/LanguageSwitcher';` |
| `Sidebar` | サイドバー | `import Sidebar from '@/components/Sidebar';` |
| `Header` | ヘッダー | `import Header from '@/components/Header';` |
| `Footer` | フッター | `import Footer from '@/components/Footer';` |

## 使用ルール

### 1. ボタン使用ルール
- すべてのボタンは `Button` コンポーネントを使用する
- ボタンスタイルは `variant` プロパティで指定：
  - `primary`: メインアクション用（青）
  - `secondary`: 補助アクション用（グレー）
  - `destructive`: 削除などの破壊的アクション用（赤）
  - `outline`: アウトライン付きボタン
  - `ghost`: 背景なしボタン
  - `purple`: 特別アクション用（紫）
- ボタンサイズは `size` プロパティで指定（`sm`, `md`, `lg`）
- ローディング状態は `isLoading` プロパティで指定

### 2. フォーム要素ルール
- 入力フィールドは `Input` コンポーネントを使用
- エラー表示は `error` プロパティを使用
- ファイルアップロードには `FileUploadArea` コンポーネントを使用

### 3. カード・コンテナ使用ルール
- 情報を囲むカードには `Card` コンポーネントを使用
- カード内のコンテンツには `CardContent` を使用
- ツール表示には専用の `ToolCard` コンポーネントを使用

### 4. コンポーネント拡張ルール
- 共通コンポーネントを拡張する場合は、既存のpropsを尊重する
- クラス名を拡張する場合は `className` プロパティを使用
- 既存のpropsと衝突しないように注意

### 5. コピー機能実装ルール
- テキストコピー機能が必要な場合は、`CopyButton` コンポーネントを使用
- クリップボードAPIとの連携やトースト通知が組み込み済み

### 6. レスポンシブデザインルール
- コンポーネントが提供するレスポンシブ対応を活用
- 必要に応じてTailwind CSSのレスポンシブユーティリティを組み合わせる

### 7. アクセシビリティルール
- 共通コンポーネントが提供するアクセシビリティ機能を維持する
- フォーム要素にはラベルを適切に関連付ける
- キーボード操作に対応する

## カスタマイズ方法

### 共通コンポーネント拡張
- 共通コンポーネントを拡張する際は、`className` プロパティを利用して追加のスタイルを適用する
- 例：
```tsx
<Button 
  variant="primary" 
  className="w-full mt-4"
>
  送信する
</Button>
```

### 新規コンポーネント開発
- 複数のページで再利用する可能性のあるコンポーネントは `src/components/` に配置
- 単一ページでのみ使用するコンポーネントはそのページのディレクトリに配置
- 基本UI要素に近いコンポーネントは `src/components/ui/` に配置を検討

## 注意事項
- 既存の共通コンポーネントでは実現できない特殊なUIが必要な場合のみ、新規コンポーネントの作成を検討する
- 共通コンポーネントを修正する場合は、既存の使用箇所に影響がないか十分に検証する
- Tailwind CSSのユーティリティクラスは共通コンポーネント内で必要最小限に留め、柔軟性を確保する 