---
description: フロントエンドにおけるベストプラクティス
globs: app/**/*.*, src/**/*.*
---

---
# フロントエンド コーディングルール

以下は、boring-tool プロジェクトにおけるフロントエンド開発のベストプラクティスです。

本プロジェクトでは、**AI を活用してソースコードを自動生成しやすい仕組み** と、**サービスが増加しても高速かつ同一の仕組みで横展開できる** 設計を重視しています。Next.js の App Router を採用したモノレポ構成により、各サービスの追加・保守が容易に行えることを目指します。

## 1. 命名規則
- React コンポーネント名は **PascalCase** を使用する。
- ファイル名およびディレクトリ名は **kebab-case** を使用する。

## 2. コーディングスタイルと品質管理
- 全コードは TypeScript を使用し、厳格な型チェックを実施する。
- ESLintのルールに従い、Prettier を利用してコードフォーマットを統一する。
- 適切なコメントとドキュメントを追加し、コードの意図を明確にする。
- AI でのコード生成を意識して、命名規則やディレクトリ構成を一貫させることで、生成されるコードが自動化ツールや他サービスへの横展開に容易に適応できるようにする。

## 3. SEOとパフォーマンス
- 各ツールおよびコラムページには適切なメタデータを設定する。
- サイトマップを自動生成し、SEO対策を行う。
- 画像最適化やコード分割など、パフォーマンス最適化を実施する。

## 4. コンテンツ管理
- コラム記事は各ツールのサブディレクトリ内で管理する。
- MDXを使用してコンテンツを作成し、必要に応じてカスタムコンポーネントを組み込む。

## 5. その他共通
- コンテンツは必ず英語で記述する。
- アセットファイルは `assets` ディレクトリで一元管理する。



