---
description: フロントエンドにおけるベストプラクティス
globs: app/**/*.*, packages/**/*.*,src/**/*.*
---

---
# フロントエンド コーディングルール

以下は、boring-tool プロジェクトにおけるフロントエンド開発のベストプラクティスです。

本プロジェクトでは、**AI を活用してソースコードを自動生成しやすい仕組み** と、**サービスが増加しても高速かつ同一の仕組みで横展開できる** 設計を重視しています。Next.js の App Router を採用したモノレポ構成により、各サービスの追加・保守が容易に行えることを目指します。

## 1. ディレクトリ構成
- **app/**: Next.js アプリケーションのコードを管理するディレクトリ。
  - 各サービスはサブディレクトリ（例: `character-counter`, `word-gen`, `qr-generation`）として構成する。  
    → サービスの追加は横展開が容易で、同一の仕組みを利用して高速に展開できる。
- **packages/**: 複数ツール間で共有する共通パッケージ群
  - **ui/**: 複数ツール間で再利用する共通の UI コンポーネント
  - **common/**: 共通のユーティリティや設定
  - **eslint-config-custom/**: カスタムESLint設定
  - **tailwindconfig/**: 共通のTailwind CSS設定
  - **tsconfig/**: 共通のTypeScript設定
- **src/**: ソースコードのルートディレクトリ
  - **constants/**: アプリケーション全体で使用する定数を管理
  - **[other directories]**: 他のソースコードディレクトリ

具体的な構成は以下。
```
boring-tool/                          // モノレポのルートディレクトリ
├─ app/                               // Next.js アプリ（App Router を採用）
│  ├─ layout.tsx                      // グローバルレイアウト（ヘッダー・フッターなど共通UI）
│  ├─ page.tsx                        // トップページ（ホームページ）
│  ├─ globals.css                     // グローバルスタイル
│  ├─ [lang]/                       // 多言語対応のダイナミックルート
│  │  ├─ layout.tsx                   // 言語固有のレイアウト
│  │  ├─ page.tsx                     // 言語固有のトップページ
│  │  ├─ character-counter/           // 「文字数カウンター」ツール用ルート
│  │  │   ├─ page.tsx                 // 文字数カウンターのメイン画面
│  │  │   ├─ layout.tsx               // ツール固有のレイアウト
│  │  │   ├─ metadata.ts              // メタデータ
│  │  ├─ word-gen/                    // 「ワード生成」ツール用ルート
│  │  └─ qr-generation/               // 「QRコード生成」ツール用ルート
├─ src/                               // ソースコードのルートディレクトリ
├─ assets/                            // アセットファイル
├─ locales/                           // 多言語対応の翻訳ファイル
├─ packages/                          // 複数ツール間で共有する共通パッケージ群
│  ├─ ui/                             // 各ツールで再利用する共通 UI コンポーネント
│  ├─ common/                         // 共通のユーティリティや設定
│  ├─ eslint-config-custom/          // カスタムESLint設定
│  ├─ tailwindconfig/                 // 共通のTailwind CSS設定
│  └─ tsconfig/                       // 共通のTypeScript設定
├─ public/                            // 静的ファイル（画像、アイコンなど）
├─ package.json                       // プロジェクト設定
├─ tsconfig.json                      // TypeScript設定
├─ tailwind.config.ts                 // Tailwind CSS設定
├─ next.config.mjs                    // Next.js設定
├─ next-sitemap.config.cjs           // サイトマップ生成設定
└─ postcss.config.mjs                // PostCSS設定
```

## 2. 命名規則
- React コンポーネント名は **PascalCase** を使用する。
- ファイル名およびディレクトリ名は **kebab-case** を使用する。
- メタデータファイルは `metadata.ts` として統一する。

## 3. コーディングスタイルと品質管理
- 全コードは TypeScript を使用し、厳格な型チェックを実施する。
- ESLint（packages/eslint-config-custom）のルールに従い、Prettier を利用してコードフォーマットを統一する。
- 適切なコメントとドキュメントを追加し、コードの意図を明確にする。
- AI でのコード生成を意識して、命名規則やディレクトリ構成を一貫させることで、生成されるコードが自動化ツールや他サービスへの横展開に容易に適応できるようにする。

## 4. SEOとパフォーマンス
- 各ツールおよびコラムページには適切なメタデータを設定する。
- サイトマップを自動生成し、SEO対策を行う。
- 画像最適化やコード分割など、パフォーマンス最適化を実施する。

## 5. コンテンツ管理
- コラム記事は各ツールのサブディレクトリ内で管理する。
- MDXを使用してコンテンツを作成し、必要に応じてカスタムコンポーネントを組み込む。

## 6. その他共通
- コンテンツは必ず英語で記述する。
- 共通のコンポーネントやユーティリティは packages ディレクトリで管理し、再利用を促進する。
- アセットファイルは `assets` ディレクトリで一元管理する。



